import com.android.build.gradle.internal.LoggerWrapper
import com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask
import com.android.build.gradle.internal.tasks.databinding.DataBindingMergeDependencyArtifactsTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.gradle.plugin.KotlinPluginWrapperKt

plugins {
    alias(libs.plugins.starter.config)
    alias(libs.plugins.starter.versioning)
    alias(libs.plugins.starter.library.android) apply(false)
    alias(libs.plugins.osacky.doctor)
    alias(libs.plugins.starter.easylauncher) apply(false)
}

commonConfig {
    javaVersion JavaVersion.VERSION_11
    androidPlugin {
        minSdkVersion 23
    }
}

allprojects {
    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs = freeCompilerArgs +
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi" +
                "-opt-in=kotlin.time.ExperimentalTime" +
                "-opt-in=kotlinx.coroutines.FlowPreview"
        }
    }
    ["com.android.library", "com.android.application"].forEach {
        pluginManager.withPlugin(it) {
            tasks.withType(DataBindingMergeDependencyArtifactsTask).configureEach {
                outputs.cacheIf { false }
            }
            android.packagingOptions {
                exclude 'META-INF/*.kotlin_module'
            }
        }

        tasks.withType(DeviceProviderInstrumentTestTask).configureEach {
//            doFirst {
//                LoggerWrapper.Switch.shouldShowInfoLogsAsLifecycle = true
//            }
//            doLast {
//                LoggerWrapper.Switch.shouldShowInfoLogsAsLifecycle = false
//            }
        }

        if (com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.startsWith("7.")) {
            org.slf4j.LoggerFactory.getILoggerFactory().addNoOpLogger("com.android.build.api.component.impl.MutableListBackedUpWithListProperty")
            org.slf4j.LoggerFactory.getILoggerFactory().addNoOpLogger("com.android.build.api.component.impl.MutableMapBackedUpWithMapProperty")
        } else {
            throw new Exception("AGP major version changed, review hack.")
        }
    }
    pluginManager.withPlugin("com.android.library") {
        android {
            namespace "io.github.wykopmobilny${path.replace(":", ".").replace("-", "_")}"
        }
        android.variantFilter {
            ignore = buildType.name != "debug"
        }
    }
    pluginManager.withPlugin("com.android.application") {
        android.buildTypes.configureEach {
            setMatchingFallbacks("debug")
        }
    }
    configurations.configureEach {
        resolutionStrategy.eachDependency {
            if (requested.group == "org.checkerframework" && requested.name != "checker-compat-qual") {
                useVersion(libs.versions.mavencentral.checker.get())
                because("https://github.com/google/ExoPlayer/issues/10007")
            }

            def kotlinVersion = KotlinPluginWrapperKt.getKotlinPluginVersion(project)
            if (requested.group == 'org.jetbrains.kotlin' && requested.name.startsWith("kotlin")) {
                useVersion kotlinVersion
            }
        }
    }
}
