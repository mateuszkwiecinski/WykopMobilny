import com.android.build.gradle.internal.LoggerWrapper
import com.android.build.gradle.internal.tasks.DeviceProviderInstrumentTestTask
import com.slack.keeper.KeeperVariantMarker
import io.gitlab.arturbosch.detekt.DetektCreateBaselineTask

plugins {
    id("com.starter.application.android")
    id("com.starter.easylauncher")
    id("org.jetbrains.kotlin.kapt")
    id("org.jetbrains.kotlin.plugin.parcelize")
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    id("com.slack.keeper")
    id("com.google.firebase.firebase-perf")
    id("pl.droidsonroids.animation-disabler")
}

projectConfig {
    javaFilesAllowed true
}

def findProperty(key) {
    return properties[key] ?: System.getenv(key) ?: System.getenv(key.replace(".", "_").toUpperCase()) ?: ""
}

android {
    defaultConfig {
        applicationId "io.github.wykopmobilny"

        testInstrumentationRunner = "io.github.wykopmobilny.DefaultTestRunner"
        buildConfigField 'String', 'APP_SECRET', "\"${findProperty("wykop.secretKey")}\""
        buildConfigField 'String', 'APP_KEY', "\"${findProperty("wykop.appKey")}\""
    }
    namespace defaultConfig.applicationId
    testBuildType findProperty("testBuildType") ?: "debug"

    compileOptions {
        coreLibraryDesugaringEnabled true
    }

    signingConfigs {
        named("debug") {
            storeFile rootProject.file("keys/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        register("release") {
            storeFile rootProject.file("keys/release.keystore")
            storePassword findProperty("wykop.keystore.password")
            keyAlias findProperty("wykop.keystore.key.name")
            keyPassword findProperty("wykop.keystore.key.password")
        }
    }

    buildTypes {
        named("debug") {
            signingConfig signingConfigs.getByName("debug")
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            resValue "bool", "disable_firebase_analytics", "true"
        }
        named("release") {
            minifyEnabled true
            signingConfig signingConfigs.getByName("release")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            firebaseCrashlytics.mappingFileUploadEnabled findProperty("uploadMapping") == "true"
            resValue "bool", "disable_firebase_analytics", "false"
        }
        register("releaseTest") {
            initWith getByName("release")
            signingConfig signingConfigs.getByName("debug")
            testProguardFile "proguard-rules-test.pro"
            firebaseCrashlytics.mappingFileUploadEnabled false
            resValue "bool", "disable_firebase_analytics", "true"
        }
    }

    buildFeatures {
        viewBinding true
        resValues true
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/*.version'
        exclude 'META-INF/*.version'
        exclude 'META-INF/CHANGES'
        exclude 'META-INF/README.md'
        exclude '*.properties'
        exclude 'DebugProbesKt.bin'
    }
    lint {
        checkReleaseBuilds = false
        disable += "UnknownNullness"
        disable += "Range"
    }
}


androidComponents {
    beforeVariants(selector().withBuildType("releaseTest")) { builder ->
        builder.registerExtension(KeeperVariantMarker.class, KeeperVariantMarker.INSTANCE)
    }
}

keeper {
    traceReferences {}
}

kotlinter {
    experimentalRules = false
}

easylauncher {
    buildTypes {
        debug {
            filters = customRibbon(ribbonColor: "#2F4F4F", position: "bottom")
        }
    }
}

repositories {
    google()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation(projects.data.wykop.remote)
    implementation(projects.data.github.remote)
    implementation(projects.data.scraper.remote)
    implementation(projects.data.storage.android)
    implementation(projects.data.framework.android)
    implementation(projects.data.cache.sqldelight)
    implementation(projects.data.work.android)
    implementation(projects.ui.base.android)
    implementation(projects.ui.blacklist.android)
    implementation(projects.ui.linkDetails.android)
    implementation(projects.ui.login.android)
    implementation(projects.ui.styles.android)
    implementation(projects.ui.profile.android)
    implementation(projects.ui.search.android)
    implementation(projects.ui.settings.android)
    implementation(projects.ui.notifications.android)
    implementation(projects.ui.twoFactor.android)
    implementation(projects.domain)
    implementation(libs.recyclerview.core)
    implementation(libs.appcompat.core)
    implementation(libs.exifinterface.core)
    implementation(libs.browser.core)
    implementation(libs.work.runtime)
    implementation(libs.startup.runtime)
    implementation(libs.usefulness.slidr)
    implementation(libs.chrisbanes.photoview)
    implementation(libs.davemorrissey.subsamplingimageview)
    implementation(libs.exoplayer.core)
    implementation(libs.exoplayer.okhttp)
    implementation(libs.coroutines.rxjava)
    implementation(libs.retrofit.core)
    implementation(libs.jetbrains.markdown)
    debugImplementation(libs.leakcanary.core)
    implementation(platform("com.google.firebase:firebase-bom:30.3.2"))
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.firebase:firebase-crashlytics-ktx")
    implementation("com.google.firebase:firebase-perf-ktx")
    implementation("com.google.firebase:firebase-config-ktx")
    implementation(files('libs/YouTubeAndroidPlayerApi.jar'))
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.6'

    //noinspection GradleDependency
    implementation("org.ocpsoft.prettytime:prettytime:4.0.4.Final")
    implementation("io.reactivex.rxjava2:rxandroid:2.1.1")
    implementation("io.reactivex.rxjava2:rxjava:2.2.21")
    implementation("com.jakewharton.threetenabp:threetenabp:1.4.0")
    implementation(libs.retrofit.core)

    implementation(libs.dagger.core)
    implementation(libs.dagger.android)
    kapt(libs.dagger.compiler)
    kapt(libs.dagger.compiler.android)
    kaptAndroidTest(libs.dagger.compiler)
    kaptAndroidTest(libs.dagger.compiler.android)

    implementation(libs.glide.core)
    implementation(libs.glide.okhttp)
    kapt(libs.glide.compiler)
    kaptAndroidTest(libs.glide.compiler)

    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)

    androidTestImplementation(libs.bundles.espresso) {
        exclude(group: "com.google.protobuf", module: "protobuf-lite")
    }
    androidTestImplementation(libs.okhttp.mockwebserver)
}

tasks.named("detekt") {
    baseline = file("$rootDir/detekt-baseline.xml")
}

tasks.register("detektProjectBaseline", DetektCreateBaselineTask) {
    description = "Overrides current baseline."
    ignoreFailures.set(true)
    buildUponDefaultConfig.set(true)
    setSource(files(rootDir))
    config.setFrom(tasks.getByName("detekt").config)
    baseline.set(file("$rootDir/detekt-baseline.xml"))
    include("**/*.kt")
    include("**/*.kts")
    exclude("**/resources/**")
    exclude("**/build/**")
}
